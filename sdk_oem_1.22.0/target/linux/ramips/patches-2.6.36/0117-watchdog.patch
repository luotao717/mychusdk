Index: linux-2.6.36/drivers/watchdog/ralink_wdt.c
===================================================================
--- linux-2.6.36.orig/drivers/watchdog/ralink_wdt.c
+++ linux-2.6.36/drivers/watchdog/ralink_wdt.c
@@ -35,101 +35,16 @@ void SetWdgTimerEbl(unsigned int timer, 
     result=sysRegRead(timer);
 
     if(ebl==1){
-#if defined (CONFIG_RALINK_RT6855A)
-        result |= (1<<25) | (1<<5);
-#else
         result |= (1<<7);
-#endif
     }else {
-#if defined (CONFIG_RALINK_RT6855A)
-        result &= ~((1<<25)|(1<<5));
-#else
         result &= ~(1<<7);
-#endif
     }
 
     sysRegWrite(timer,result);
 
   //timer1 used for watchdog timer
 #if defined (CONFIG_RALINK_TIMER_WDG_RESET_OUTPUT)
-
-#if defined (CONFIG_RALINK_RT2880)
-    if(timer==TMR1CTL) {
-        result=sysRegRead(CLKCFG);
-
-        if(ebl==1){
-            result |= (1<<9); /* SRAM_CS_N is used as wdg reset */
-        }else {
-            result &= ~(1<<9); /* SRAM_CS_N is used as normal func */
-        }
-
-        sysRegWrite(CLKCFG,result);
-    }
-#elif defined (CONFIG_RALINK_RT3052) || defined (CONFIG_RALINK_RT2883)
-    if(timer==TMR1CTL) {
-        //the last 4bits in SYSCFG are write only
-        result=sysRegRead(SYSCFG);
-
-        if(ebl==1){
-            result |= (1<<2); /* SRAM_CS_MODE is used as wdg reset */
-        }else {
-            result &= ~(1<<2); /* SRAM_CS_MODE is used as wdg reset */
-        }
-
-        sysRegWrite(SYSCFG,result);
-    }
-#elif defined (CONFIG_RALINK_RT3883)
-    if(timer==TMR1CTL) {
-        result=sysRegRead(SYSCFG1);
-
-        if(ebl==1){
-            result |= (1<<2); /* GPIO2 as watch dog reset */
-        }else {
-            result &= ~(1<<2);
-        }
-
-        sysRegWrite(SYSCFG1,result);
-    }
-#elif defined (CONFIG_RALINK_RT3352)
-    if(timer==TMR1CTL) {
-	//GPIOMODE[22:21]
-	//2'b00:SPI_CS1
-	//2'b01:WDG reset output
-	//2'b10:GPIO mode
-        result=sysRegRead(GPIOMODE); //GPIOMODE[22:21]
-	result &= ~(0x3<<21);
-
-        if(ebl==1){
-            result |= (0x1<<21); /* SPI_CS1 as watch dog reset */
-        }else {
-            //result |= (0x0<<21); //SPI_CS1
-            result |= (0x2<<21); //GPIO_mode
-        }
-
-        sysRegWrite(GPIOMODE,result);
-    }
-#elif defined (CONFIG_RALINK_RT5350)
-    if(timer==TMR1CTL) {
-	/*
-	 * GPIOMODE[22:21]
-	 * 2'b00:SPI_CS1
-	 * 2'b01:WDG reset output
-	 * 2'b10:GPIO mode
-	 */
-        result=sysRegRead(GPIOMODE);
-	result &= ~(0x3<<21);
-
-        if(ebl==1){
-            result |= (0x1<<21);
-        }else {
-	    //result |= (0x0<<21); //SPI_CS1
-	    result |= (0x2<<21); //GPIO mode
-	}
-
-	sysRegWrite(GPIOMODE,result);
-
-    }
-#elif defined (CONFIG_RALINK_MT7620)
+#if defined (CONFIG_RALINK_MT7620)
 
     if(timer==TMR1CTL) {
         result=sysRegRead(GPIOMODE);
@@ -208,39 +123,28 @@ void SetWdgTimerClock(unsigned int timer
 }
 #endif
 
-static void RaWdgStart(void)
+/* Controls the WDT reset output low period
+ * unit = 1 uSec
+ */
+void SetWdgResetPeriod(unsigned int reg, int uSec)
 {
-#if defined (CONFIG_RALINK_RT6855A)
-    int HwConf;
-#endif
+    unsigned int result;
+    result = sysRegRead(reg);
+    printk("before %s(0x%x,%d), reg = 0x%x\n", __FUNCTION__, reg, uSec, result);
+    result &= ~(0x3FFF << 16) ;
+    result |= (uSec << 16) ;
+    sysRegWrite(reg, result);
+    printk("after  %s(0x%x,%d), reg = 0x%x\n", __FUNCTION__, reg, uSec, result);
+}
 
+
+static void RaWdgStart(void)
+{
     printk(KERN_INFO "Started WatchDog Timer.\n");
 
     SetTimerMode(TMR1CTL,WATCHDOG);
-#if defined (CONFIG_RALINK_RT2880) || defined (CONFIG_RALINK_RT2883) || \
-    defined (CONFIG_RALINK_RT3052) || defined (CONFIG_RALINK_RT3883)
-    /*
-     * For user easy configuration, We assume the unit of watch dog timer is 1s,
-     * so we need to calculate the TMR1LOAD value.
-     *
-     * Unit= 1/(SysClk/65536), 1 Sec = (SysClk)/65536
-     *
-     */
-    SetWdgTimerClock(TMR1CTL,SYS_CLK_DIV65536);
-    WdgLoadValue = WATCHDOG_TIMEOUT * (get_surfboard_sysclk()/65536);
-#elif defined (CONFIG_RALINK_RT6855A)
-    HwConf = sysRegRead(RALINK_SYSCTL_BASE + 0x8c);
-    if(((HwConf >> 24) & 0x3) == 0) { //SDR
-            WdgLoadValue =  WATCHDOG_TIMEOUT * (140 * 1000 * 1000 / 2);
-    }else {
-            if(((HwConf >> 26) & 0x1) == 0) {
-                     WdgLoadValue =  WATCHDOG_TIMEOUT * (233 * 1000 * 1000 / 2);
-            }else {
-                     WdgLoadValue =  WATCHDOG_TIMEOUT * (175 * 1000 * 1000 / 2);
-            }
-    }
-    sysRegWrite(TMR1LOAD,  WdgLoadValue);
-#elif defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7628)
+    SetWdgResetPeriod(RSTSTT, 1024);
+#if defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7628)
     SetWdgTimerClock(1000); // 1 msec
     WdgLoadValue = WATCHDOG_TIMEOUT * 1000;
     sysRegWrite(TMR1LOAD,  WdgLoadValue);
@@ -262,9 +166,7 @@ static void RaWdgStop(void)
 
 static void RaWdgReload(void)
 {
-#if defined (CONFIG_RALINK_RT6855A)
-	 sysRegWrite(RLDWDOG, 1);
-#elif defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7628)
+#if defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7628)
 	 sysRegWrite(TMRSTAT, (1 << 9)); //WDTRST
 #else
 	 sysRegWrite(TMR1LOAD, WdgLoadValue);
@@ -319,12 +221,7 @@ static struct watchdog_info ident = {
     .identity		= "Ralink Hardware WatchDog",
 };
 
-#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35)
 long ralink_ioctl (struct file *filp, unsigned int cmd, unsigned long arg)
-#else
-static int ralink_ioctl(struct inode *inode, struct file *file,
-	unsigned int cmd, unsigned long arg)
-#endif
 {
 	int options, retval = -EINVAL;
 
@@ -349,11 +246,13 @@ static int ralink_ioctl(struct inode *in
 				return -EFAULT;
 
 			if (options & WDIOS_DISABLECARD) {
+	            printk(KERN_INFO "wdt stopped by ioctl!\n");
 				RaWdgStop();
 				retval = 0;
 			}
 
 			if (options & WDIOS_ENABLECARD) {
+	            printk(KERN_INFO "wdt enableed by ioctl!\n");
 				RaWdgStart();
 				retval = 0;
 			}
@@ -366,7 +265,11 @@ static int ralink_ioctl(struct inode *in
 static int ralink_notify_sys(struct notifier_block *this, unsigned long code, void *unused)
 {
 	if (code == SYS_DOWN || code == SYS_HALT)
-		RaWdgStop();		/* Turn the WDT off */
+    {
+        /* watchdog keeps working until the last second. */
+        printk("wdt keep working ...\n");
+        // RaWdgStop();		/* Turn the WDT off */
+    }
 
 	return NOTIFY_DONE;
 }
@@ -375,11 +278,7 @@ static const struct file_operations rali
 	.owner		= THIS_MODULE,
 	.llseek		= no_llseek,
 	.write		= ralink_write,
-#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,35)
 	.unlocked_ioctl = ralink_ioctl,
-#else
-	.ioctl		= ralink_ioctl,
-#endif
 	.open		= ralink_open,
 	.release	= ralink_release,
 };
Index: linux-2.6.36/arch/mips/ralink/reset.c
===================================================================
--- linux-2.6.36.orig/arch/mips/ralink/reset.c
+++ linux-2.6.36/arch/mips/ralink/reset.c
@@ -42,6 +42,9 @@
 #include <asm/mach-ralink/generic.h>
 #include <linux/pm.h>
 #include <linux/delay.h>
+#if defined(CONFIG_RALINK_MT7620)
+#include "rt_timer.h"
+#endif
 
 static void mips_machine_restart(char *command);
 static void mips_machine_halt(void);
@@ -49,8 +52,46 @@ static void mips_machine_power_off(void)
 
 static void mips_machine_restart(char *command)
 {
+#if defined(CONFIG_RALINK_MT7620)
+    /* workaround: 7620 use watchdog to reset the system. */
+    unsigned int result;
+#if 0
+#if defined(CONFIG_RALINK_MT7620)
+    printk("CONFIG_RALINK_MT7620\n");
+#endif
+#if defined(CONFIG_RALINK_WATCHDOG)
+    printk("CONFIG_RALINK_WATCHDOG\n");
+#endif
+#if defined(CONFIG_RALINK_TIMER_WDG)
+    printk("CONFIG_RALINK_TIMER_WDG\n");
+#endif
+#if defined(CONFIG_RALINK_WATCHDOG_MODULE)
+    printk("CONFIG_RALINK_WATCHDOG_MODULE\n");
+#endif
+#if defined(CONFIG_RALINK_TIMER_WDG_MODULE)
+    printk("CONFIG_RALINK_TIMER_WDG_MODULE\n");
+#endif
+#endif
+    printk("wdg reset\n");
+	*(volatile unsigned int*)(TMR1LOAD) = 1 * (40000000/65536); //fixed at 40Mhz
+    result=sysRegRead(TMR1CTL);
+    result |= (1<<7);
+    sysRegWrite(TMR1CTL,result);
+    result=sysRegRead(GPIOMODE);
+    /*
+     * GPIOMODE[22:21] WDT_GPIO_MODE
+     * 2'b00:Normal
+     * 2'b01:REFCLK0
+     * 2'b10:GPIO Mode
+     */
+    result &= ~(0x3<<21);
+    result |= (0x0<<21);
+    sysRegWrite(GPIOMODE,result);
+#else
+    printk("soft reset!\n");
 	*(volatile unsigned int*)(SOFTRES_REG) = GORESET;
 	*(volatile unsigned int*)(SOFTRES_REG) = 0;
+#endif
 }
 
 static void mips_machine_halt(void)
Index: linux-2.6.36/drivers/watchdog/ralink_wdt.h
===================================================================
--- linux-2.6.36.orig/drivers/watchdog/ralink_wdt.h
+++ linux-2.6.36/drivers/watchdog/ralink_wdt.h
@@ -11,14 +11,10 @@
 #define SYSCFG1     RALINK_SYSCTL_BASE + 0x14  /* System Configuration Register1 */
 #define GPIOMODE    RALINK_SYSCTL_BASE + 0x60
 #define CLKCFG      RALINK_SYSCTL_BASE + 0x30  /* Clock Configuration Register */
+#define RSTSTT      RALINK_SYSCTL_BASE + 0x38  /* Reset Status Register */
 #define TMRSTAT     (RALINK_TIMER_BASE)  /* Timer Status Register */
 
-#if defined (CONFIG_RALINK_RT6855A)
-#define TMR1CTL     (TMRSTAT + 0x0)  /* WDG Timer Control */
-#define TMR1LOAD    (TMRSTAT + 0x2C) /* WDG Timer Load Value Register */
-#define TMR1VAL     (TMRSTAT + 0x30) /* WDG Timer Current Value Register */
-#define RLDWDOG     (TMRSTAT + 0x38) /* Reload Watchdog */
-#elif defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7628)
+#if defined (CONFIG_RALINK_MT7621) || defined (CONFIG_RALINK_MT7628)
 #define TMR0CTL     (TMRSTAT + 0x10)  /* Timer0 Control */
 #define TMR0LOAD    (TMRSTAT + 0x14)  /* Timer0 Load Value */
 #define TMR0VAL     (TMRSTAT + 0x18)  /* Timer0 Counter Value */
