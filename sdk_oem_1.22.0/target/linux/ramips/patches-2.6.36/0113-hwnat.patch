Index: linux-2.6.36/net/nat/hw_nat/fast_path.c
===================================================================
--- linux-2.6.36.orig/net/nat/hw_nat/fast_path.c
+++ linux-2.6.36/net/nat/hw_nat/fast_path.c
@@ -19,11 +19,11 @@
 #include "util.h"
 
 #if defined(CONFIG_GE_RGMII_INTERNAL_P4_AN) || defined(CONFIG_GE_RGMII_INTERNAL_P0_AN)
-char *ifname="eth3";
+char *ifname="eth1";
 #else
-char *ifname="eth2";
+char *ifname="eth0";
 #endif
-char *lanifname="eth2";
+char *lanifname="eth0";
 
 struct net_device *WanInf;
 struct net_device *LanInf;
Index: linux-2.6.36/net/nat/hw_nat/ra_nat.c
===================================================================
--- linux-2.6.36.orig/net/nat/hw_nat/ra_nat.c
+++ linux-2.6.36/net/nat/hw_nat/ra_nat.c
@@ -2269,11 +2269,11 @@ uint32_t PpeSetExtIfNum(struct sk_buff *
 	    offset = DP_USB;
 	}
 #endif // CONFIG_RA_HW_NAT_NIC_USB //
-	else if (strncmp(skb->dev->name, "eth2", 4) == 0) {
+	else if (strncmp(skb->dev->name, "eth0", 4) == 0) {
 	    offset = DP_GMAC;
 	}
 #ifdef CONFIG_RAETH_GMAC2
-	else if (strncmp(skb->dev->name, "eth3", 4) == 0) {
+	else if (strncmp(skb->dev->name, "eth1", 4) == 0) {
 	    offset = DP_GMAC2;
 	}
 #endif
@@ -3131,9 +3131,9 @@ static void PpeSetDstPort(uint32_t Ebl)
 #endif // CONFIG_RTDEV_AP_MESH //
 #endif // CONFIG_RA_HW_NAT_WIFI //
 
-	DstPort[DP_GMAC] = ra_dev_get_by_name("eth2");
+	DstPort[DP_GMAC] = ra_dev_get_by_name("eth0");
 #ifdef CONFIG_RAETH_GMAC2
-	DstPort[DP_GMAC2] = ra_dev_get_by_name("eth3");
+	DstPort[DP_GMAC2] = ra_dev_get_by_name("eth1");
 #endif
 #if defined (CONFIG_RA_HW_NAT_NIC_USB)
 	DstPort[DP_PCI] = ra_dev_get_by_name("eth0");	// PCI interface name
@@ -3441,40 +3441,52 @@ static void SetAclControl(uint32_t HIT_P
 
 }
 
-struct net_device *LanInt;
-struct net_device *WanInt;
-static void SetAclFwd(uint32_t Ebl)
+struct net_device *LanInt = NULL;
+struct net_device *WanInt = NULL;
+static int SetAclFwd(uint32_t Ebl)
 {
 	uint16_t mac_pattern;
 	unsigned int i, value;
 
-
-	if(Ebl){
+	if(Ebl)
+    {
 #if defined (CONFIG_RAETH_SPECIAL_TAG)
 #if defined (CONFIG_WAN_AT_P4)
-		WanInt = ra_dev_get_by_name("eth2.5");
+		WanInt = ra_dev_get_by_name("eth0.5");
 #else
-		WanInt = ra_dev_get_by_name("eth2.1");
+		WanInt = ra_dev_get_by_name("eth0.1");
 #endif
 #else
-		WanInt = ra_dev_get_by_name("eth2.2");
+		WanInt = ra_dev_get_by_name("eth0.2");
 #endif
-		LanInt = ra_dev_get_by_name("br0");
+        if(!WanInt)
+        {
+            printk(KERN_ERR "Unable to find WAN dev, eth2.2!\n");
+            return -1;
+        }
+
+        LanInt = ra_dev_get_by_name("br-lan");
+        if(!LanInt)
+        {
+            printk(KERN_ERR "Unable to find LAN dev, br-lan!\n");
+            dev_put(WanInt);
+            return -1;
+        }
+
 		for(i = 0;i< 6;i++){
 			value = RegRead(RALINK_ETH_SW_BASE + 0x2004 + (i * 0x100));
 			value |= (0x1 << 10);
 			RegWrite(RALINK_ETH_SW_BASE + 0x2004 + (i * 0x100), value);
 		}
 	}
-	else{
+	else
+    {
 		for(i = 0;i< 6;i++){
 			value = RegRead(RALINK_ETH_SW_BASE + 0x2004 + (i * 0x100));
 			value &= ~(0x1 << 10);
 			RegWrite(RALINK_ETH_SW_BASE + 0x2004 + (i * 0x100), value);
 		}
-		dev_put(WanInt);
-		dev_put(LanInt);
-		return;
+		return 0;
 	}
 
 	printk("LAN dev address is %2x %2x %2x %2x %2x %2x \n", LanInt->dev_addr[0], LanInt->dev_addr[1], \
@@ -3482,24 +3494,24 @@ static void SetAclFwd(uint32_t Ebl)
 	printk("WAN dev address is %2x %2x %2x %2x %2x %2x \n", WanInt->dev_addr[0], WanInt->dev_addr[1], \
 		WanInt->dev_addr[2], WanInt->dev_addr[3], WanInt->dev_addr[4], WanInt->dev_addr[5]);
 
-        mac_pattern = (LanInt->dev_addr[0] << 8)| LanInt->dev_addr[1];
-	SetAclPattern(0, 0, 0xffff, mac_pattern, 0);
-        mac_pattern = (LanInt->dev_addr[2] << 8)| LanInt->dev_addr[3];
-        SetAclPattern(0, 1, 0xffff, mac_pattern, 1);
-        mac_pattern = (LanInt->dev_addr[4] << 8)| LanInt->dev_addr[5];
-        SetAclPattern(0, 2, 0xffff, mac_pattern, 2);
-        SetAclPattern(0, 0, 0x0300, 0x0100, 3);
-        mac_pattern = (WanInt->dev_addr[0] << 8)| WanInt->dev_addr[1];
-        SetAclPattern(0, 0, 0xffff, mac_pattern, 4);
-        mac_pattern = (WanInt->dev_addr[2] << 8)| WanInt->dev_addr[3];
-        SetAclPattern(0, 1, 0xffff, mac_pattern, 5);
-        mac_pattern = (WanInt->dev_addr[4] << 8)| WanInt->dev_addr[5];
-        SetAclPattern(0, 2, 0xffff, mac_pattern, 6);
-
-        SetAclPattern(2, 1, 0xfffc, 0x0048, 8);
-        SetAclPattern(2, 1, 0x0, 0x0, 9);
-        SetAclPattern(3, 2, 0xfffc, 0x0020, 10);
-        SetAclPattern(3, 2, 0x0, 0x0, 11);
+    mac_pattern = (LanInt->dev_addr[0] << 8)| LanInt->dev_addr[1];
+    SetAclPattern(0, 0, 0xffff, mac_pattern, 0);
+    mac_pattern = (LanInt->dev_addr[2] << 8)| LanInt->dev_addr[3];
+    SetAclPattern(0, 1, 0xffff, mac_pattern, 1);
+    mac_pattern = (LanInt->dev_addr[4] << 8)| LanInt->dev_addr[5];
+    SetAclPattern(0, 2, 0xffff, mac_pattern, 2);
+    SetAclPattern(0, 0, 0x0300, 0x0100, 3);
+    mac_pattern = (WanInt->dev_addr[0] << 8)| WanInt->dev_addr[1];
+    SetAclPattern(0, 0, 0xffff, mac_pattern, 4);
+    mac_pattern = (WanInt->dev_addr[2] << 8)| WanInt->dev_addr[3];
+    SetAclPattern(0, 1, 0xffff, mac_pattern, 5);
+    mac_pattern = (WanInt->dev_addr[4] << 8)| WanInt->dev_addr[5];
+    SetAclPattern(0, 2, 0xffff, mac_pattern, 6);
+
+    SetAclPattern(2, 1, 0xfffc, 0x0048, 8);
+    SetAclPattern(2, 1, 0x0, 0x0, 9);
+    SetAclPattern(3, 2, 0xfffc, 0x0020, 10);
+    SetAclPattern(3, 2, 0x0, 0x0, 11);
 
 	SetAclControl(0x107, 0, 0x4080);
 	SetAclControl(0x207, 1, 0x8080);
@@ -3514,6 +3526,10 @@ static void SetAclFwd(uint32_t Ebl)
 	SetAclControl(0x408, 0xa, 0x7F80);///Multicast inc. CPU
 	SetAclControl(0x808, 0xb, 0x8F80);//Multicast inc. PPE ??????
 
+    if(WanInt) dev_put(WanInt);
+	if(LanInt) dev_put(LanInt);
+
+    return 0;
 }
 
 #endif
@@ -3717,7 +3733,7 @@ void foe_ts_update_ebl(int ebl)
  */
 static int32_t PpeInitMod(void)
 {
-    NAT_PRINT("Ralink HW NAT Module Enabled\n");
+    NAT_PRINT("Ralink HW NAT Module Start!\n");
 
     /* Set PPE FOE Hash Mode */
     if(!PpeSetFoeHashMode(DFL_FOE_HASH_MODE)) {
@@ -3763,9 +3779,11 @@ static int32_t PpeInitMod(void)
     /* Set GMAC fowrards packet to PPE */
 #if defined (CONFIG_RALINK_MT7620)
     if ((RegRead(0xB000000C) & 0xf) < 0x5) {
-
-	SetAclFwd(1);
-
+        if( 0 != SetAclFwd(1))
+        {
+            printk("Ralink HW NAT Init Fail! Line %d\n", __LINE__);
+            return -1;
+        }
     } else {
 	uint32_t reg;
 
@@ -3797,12 +3815,14 @@ static int32_t PpeInitMod(void)
 #if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)
 	HnatPptpL2tpInit();
 #endif
+
+    NAT_PRINT("Ralink HW NAT Module Enabled!\n");
 	return 0;
 }
 
 static void PpeCleanupMod(void)
 {
-    NAT_PRINT("Ralink HW NAT Module Disabled\n");
+    NAT_PRINT("Ralink HW NAT Module Stop!\n");
 
     /* Set GMAC fowrards packet to CPU */
 #if defined (CONFIG_RALINK_MT7620)
@@ -3854,6 +3874,7 @@ static void PpeCleanupMod(void)
 #if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)
 	HnatPptpL2tpClean();
 #endif
+    NAT_PRINT("Ralink HW NAT Module Disabled!\n");
 }
 
 module_init(PpeInitMod);
Index: linux-2.6.36/net/Kconfig
===================================================================
--- linux-2.6.36.orig/net/Kconfig
+++ linux-2.6.36/net/Kconfig
@@ -272,6 +272,7 @@ source "net/can/Kconfig"
 source "net/irda/Kconfig"
 source "net/bluetooth/Kconfig"
 source "net/rxrpc/Kconfig"
+source "net/nat/hw_nat/Kconfig"
 
 config FIB_RULES
 	bool
Index: linux-2.6.36/net/nat/hw_nat/Kconfig
===================================================================
--- linux-2.6.36.orig/net/nat/hw_nat/Kconfig
+++ linux-2.6.36/net/nat/hw_nat/Kconfig
@@ -1,3 +1,7 @@
+config RA_NAT_HW
+    bool "Enable Ralink HW NAT"
+    default n
+
 config  RA_HW_NAT
         tristate "Ralink HW NAT(** Work At Module Mode ONLY **)"
 	depends on RA_NAT_HW
Index: linux-2.6.36/net/nat/hw_nat/hwnat_ioctl.c
===================================================================
--- linux-2.6.36.orig/net/nat/hw_nat/hwnat_ioctl.c
+++ linux-2.6.36/net/nat/hw_nat/hwnat_ioctl.c
@@ -30,7 +30,7 @@ unsigned short wan_vid = CONFIG_RA_HW_NA
 #if defined (CONFIG_RA_HW_NAT_PPTP_L2TP)
 int DebugLevel = 0;
 #else
-int DebugLevel = 1;
+int DebugLevel = 0; // hua. disable log by default
 #endif
 extern unsigned int DebugPPP;
 extern int log_level;
@@ -221,13 +221,12 @@ int32_t PpeGetAGCnt(struct hwnat_ac_args
 #ifdef CONFIG_RA_HW_NAT_ACCNT_MAINTAINER
 	extern struct hwnat_ac_args ac_info[64];
 #if defined (CONFIG_RALINK_MT7620)
-        ac_info[opt3->ag_index].ag_byte_cnt += RegRead(AC_BASE + 1 * 8);      /* Low bytes */
-        ac_info[opt3->ag_index].ag_pkt_cnt  += RegRead(AC_BASE +  1 * 8 + 4);  /* High bytes */
+        ac_info[opt3->ag_index].ag_byte_cnt += RegRead(AC_BASE + opt3->ag_index * 8);      /* Low bytes */
+        ac_info[opt3->ag_index].ag_pkt_cnt  += RegRead(AC_BASE + opt3->ag_index * 8 + 4);  /* High bytes */
 #elif defined (CONFIG_RALINK_MT7621)
-        ac_info[opt3->ag_index].ag_byte_cnt += RegRead(AC_BASE + 1 * 16);             /* 64bit bytes cnt */
-        ac_info[opt3->ag_index].ag_byte_cnt += (RegRead(AC_BASE + 1 * 16 + 4) << 32);
-	ac_info[opt3->ag_index].ag_byte_cnt += ((unsigned long long)(RegRead(AC_BASE + opt3->ag_index * 16 + 4)) << 32);
-        ac_info[opt3->ag_index].ag_pkt_cnt  += RegRead(AC_BASE +  1 * 16 + 8);                /* 32bites packet cnt */
+        ac_info[opt3->ag_index].ag_byte_cnt += RegRead(AC_BASE + opt3->ag_index * 16);             /* 64bit bytes cnt */
+        ac_info[opt3->ag_index].ag_byte_cnt += (RegRead(AC_BASE + opt3->ag_index * 16 + 4) << 32);
+        ac_info[opt3->ag_index].ag_pkt_cnt  += RegRead(AC_BASE + opt3->ag_index * 16 + 8);                /* 32bites packet cnt */
 #endif
         opt3->ag_byte_cnt = ac_info[opt3->ag_index].ag_byte_cnt;
         opt3->ag_pkt_cnt = ac_info[opt3->ag_index].ag_pkt_cnt;
@@ -237,12 +236,11 @@ int32_t PpeGetAGCnt(struct hwnat_ac_args
         opt3->ag_pkt_cnt = RegRead(AC_BASE + opt3->ag_index * 8 + 4);    /* High bytes */
 #elif defined (CONFIG_RALINK_MT7621)
         opt3->ag_byte_cnt = RegRead(AC_BASE + opt3->ag_index * 16);     /* 64bit bytes cnt */
-	opt3->ag_byte_cnt += ((unsigned long long)(RegRead(AC_BASE + opt3->ag_index * 16 + 4)) << 32);
+        opt3->ag_byte_cnt += ((unsigned long long)(RegRead(AC_BASE + opt3->ag_index * 16 + 4)) << 32);
         opt3->ag_pkt_cnt = RegRead(AC_BASE + opt3->ag_index * 16 + 8);  /* 32bites packet cnt */
 #endif
 #endif
 
-
         return HWNAT_SUCCESS;
 }
 #else
